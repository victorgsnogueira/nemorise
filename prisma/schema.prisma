// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  theme         Json?
  accounts      Account[]
  sessions      Session[]
  cards         Card[]
  expenses      Expense[]
  incomes       Income[]
  investments   Investment[]
  categories    Category[]
}

model Category {
  id        String   @id @default(cuid())
  name      String
  type      String
  color     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses  Expense[]
  incomes   Income[]

  @@map("Category")
}

model Card {
  id       String   @id @default(cuid())
  name     String
  dueDay   Int
  color    String?
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]

  @@map("Card")
}

model Expense {
  id              String   @id @default(cuid())
  description     String
  amount          Float
  date            DateTime
  isPaid          Boolean  @default(false)
  notes           String?
  isInstallment   Boolean  @default(false)
  installments    Int      @default(1)
  installmentNumber Int?
  totalInstallments Int?
  installmentGroupId String?

  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  cardId          String?
  card            Card?     @relation(fields: [cardId], references: [id], onDelete: SetNull)

  @@map("Expense")
}

model Income {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime
  isReceived  Boolean  @default(false)
  notes       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  @@map("Income")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

enum InvestmentStatus {
  COMPLETED
  RESERVED
}

model Investment {
  id          String           @id @default(cuid())
  description String
  amount      Float
  status      InvestmentStatus @default(COMPLETED)
  date        DateTime         @default(now())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
